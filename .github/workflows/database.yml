name: Database Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Database operation to perform'
        required: true
        type: choice
        options:
        - migrate
        - seed
        - reset
        - generate
      environment:
        description: 'Environment to run operation on'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  database-op:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_DIR }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate database schema
      if: inputs.operation == 'generate'
      run: pnpm db:generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run database migrations
      if: inputs.operation == 'migrate'
      run: pnpm db:push
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Seed database
      if: inputs.operation == 'seed'
      run: pnpm db:seed
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Reset database
      if: inputs.operation == 'reset'
      run: pnpm db:reset
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Notify operation status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Database operation '${{ inputs.operation }}' completed successfully!"
        else
          echo "❌ Database operation '${{ inputs.operation }}' failed!"
        fi