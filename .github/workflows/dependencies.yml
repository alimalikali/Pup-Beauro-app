name: Dependencies

on:
  schedule:
    # Check for dependency updates weekly
    - cron: '0 3 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_DIR }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    # Check for outdated dependencies
    - name: Check outdated dependencies
      id: check_outdated
      run: |
        outdated=$(pnpm outdated --format json | jq -r '.[] | select(.current != .latest) | .name + "@" + .latest' | head -10)
        if [ -n "$outdated" ]; then
          echo "outdated_packages=true" >> $GITHUB_OUTPUT
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$outdated" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "outdated_packages=false" >> $GITHUB_OUTPUT
        fi

    # Create PR for dependency updates
    - name: Create Pull Request
      if: steps.check_outdated.outputs.outdated_packages == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore(deps): update dependencies'
        title: 'ðŸ”„ Update Dependencies'
        body: |
          ## ðŸ“¦ Dependency Updates
          
          This PR updates the following outdated dependencies:
          
          ```
          ${{ steps.check_outdated.outputs.packages }}
          ```
          
          ### What Changed
          - Automated dependency updates
          - All updates are patch/minor versions
          - Major version updates require manual review
          
          ### Testing
          - [ ] Build passes
          - [ ] Tests pass
          - [ ] No breaking changes
          
          ### Notes
          - Review changes before merging
          - Test thoroughly in development
          - Consider updating in stages for major changes
        branch: chore/update-dependencies
        delete-branch: true
        labels: |
          dependencies
          automated
          maintenance